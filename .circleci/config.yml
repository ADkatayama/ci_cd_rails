version: 2

jobs:
  build:
    docker:
      - image: circleci/python:3.7.1
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install awscli
          command: |
            sudo pip install awscli
            aws --version
      - run:
          name: Push release docker-image
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker build -t $CONTAINER_IMAGE:test-$CIRCLE_SHA1 .
            docker push $CONTAINER_IMAGE:test-$CIRCLE_SHA1

  test:
    docker:
      - image: $CONTAINER_IMAGE:test-$CIRCLE_SHA1
        environment:
          RAILS_ENV: test
          DATABASE_HOST: 127.0.0.1
          DATABASE_USER: root
          DATABASE_PASSWORD: password
          DOCKERIZE_VERSION: v0.6.1
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: password
    working_directory: /app
    steps:
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: 'wait for db container'
          command: dockerize -wait tcp://$DATABASE_HOST:3306 -timeout 1m
      - run: 
          name: DB migrate
          command: | 
            bundle exec rake db:create
            bundle exec rake db:schema:load
      - run:
          name: Run test
          command: bundle exec rspec
  
  code-check:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          RAILS_ENV: test
          DATABASE_HOST: 127.0.0.1
          DATABASE_USER: root
          DATABASE_PASSWORD: password
    working_directory: /app
    steps:
      - run:
          name: Code check by Rubocop
          command:
            bundle exec rubocop
  
  release-image:
    docker:
      - image: circleci/python:3.7.1
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install awscli
          command: |
            sudo pip install awscli
            aws --version
      - run:
          name: Push release docker-image
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker pull $CONTAINER_IMAGE:test-$CIRCLE_SHA1
            docker tag $CONTAINER_IMAGE:test-$CIRCLE_SHA1 $CONTAINER_IMAGE:release-$CIRCLE_SHA1
            docker push $CONTAINER_IMAGE:release-$CIRCLE_SHA1
  
  deployment:
    docker:
      - image: circleci/python:3.7.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Setup AWS ecs-cli
          command: |
            sudo curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
            sudo chmod +x /usr/local/bin/ecs-cli
            ecs-cli --version
            ecs-cli configure --cluster ci-cd-rails --default-launch-type EC2 --region ap-northeast-1 --config-name ci-cd-rails
      - run:
          name: Rolling update
          command: |
            ecs-cli compose \
              --file .circleci/deployment/app-service.yml \
              --ecs-params .circleci/deployment/ecs-params.yml \
              --project-name ci-cd-rails-app-service \
              --cluster-config ci-cd-rails \
              service up

workflows:
  version: 2
  workflow:
    jobs:
      - build
      - test:
          requires:
            - build
      - code-check:
          requires:
            - build
      - release-image:
          requires:
            - test
            - code-check
          filters:
            branches:
              only: production
      - deployment:
          requires:
            - release-image
          filters:
            branches:
              only: production
